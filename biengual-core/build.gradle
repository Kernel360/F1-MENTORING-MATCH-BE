plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'java-library'
	id 'java-test-fixtures'
	id 'maven-publish'
}

group = 'com.biengual'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	/**
	 * If any dependency is added, please classify by using comments for others.
	 * If some dependency is not suitable classification, anyone can change that.
	 */

	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.javassist:javassist:3.15.0-GA'
	implementation 'javax.xml.bind:jaxb-api:2.3.1' //xml 문서와 자바 객체 간 매핑을 자동화
	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// TestFixtures
	testFixturesImplementation 'org.springframework.boot:spring-boot-starter-web'
	testFixturesImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	testFixturesImplementation 'org.springframework.boot:spring-boot-starter-validation'
	testFixturesCompileOnly 'org.projectlombok:lombok'
	testFixturesAnnotationProcessor 'org.projectlombok:lombok'
	testFixturesImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// JWT OAuth
	implementation 'io.jsonwebtoken:jjwt:0.9.1' //자바 jwt  라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' //OAuth2 의존성 추가

	// MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

	// MongoDB
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// StringUtils
	implementation 'org.apache.commons:commons-lang3:3.17.0'

}

// QueryDSL의 생성 경로를 별도로 설정
def querydslDirMain = "$buildDir/generated/querydsl/main"
def querydslDirTestFixtures = "$buildDir/generated/querydsl/testFixtures"

sourceSets {
	main.java.srcDirs += [querydslDirMain]
	testFixtures.java.srcDirs += [querydslDirTestFixtures]
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDirMain))
}

clean.doLast {
	file(querydslDirMain).deleteDir()
}

tasks.named('bootJar') {
	enabled = false
}

tasks.named('jar') {
	enabled = true
}
tasks.register("prepareKotlinBuildScriptModel"){}